"use client"

import { useState, useEffect, FormEvent } from 'react'
import { FaEdit, FaTrash, FaPlus, FaSave, FaArrowLeft } from 'react-icons/fa'
import Link from 'next/link'
import { motion } from 'framer-motion'

// Define the interfaces for the portfolio data
interface Project {
  id: number
  title: string
  description: string
  link: string
  technologies: string[]
}

interface Skill {
  id: number
  name: string
  level: number
  category: string
}

interface Experience {
  id: number
  role: string
  company: string
  period: string
  description: string
  achievements: string[]
}

interface Education {
  id: number
  institution: string
  degree: string
  period: string
  description: string
}

interface Certificate {
  id: number
  name: string
  issuer: string
  date: string
  credentialLink: string
}

interface PortfolioData {
  projects: Project[]
  skills: Skill[]
  experiences: Experience[]
  education: Education[]
  certificates: Certificate[]
}

export default function PortfolioAdmin() {
  const [isLoading, setIsLoading] = useState(true)
  const [password, setPassword] = useState('')
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  
  // Check for authentication in localStorage on component mount
  useEffect(() => {
    const authStatus = localStorage.getItem('adminAuthenticated')
    if (authStatus === 'true') {
      setIsAuthenticated(true)
    }
  }, [])
  const [error, setError] = useState('')
  const [activeSection, setActiveSection] = useState<'projects' | 'skills' | 'experiences' | 'education' | 'certificates'>('projects')
  
  // State for portfolio data
  const [portfolioData, setPortfolioData] = useState<PortfolioData>({
    projects: [],
    skills: [],
    experiences: [],
    education: [],
    certificates: []
  })
  
  // Editing states
  const [editingProject, setEditingProject] = useState<Project | null>(null)
  const [editingSkill, setEditingSkill] = useState<Skill | null>(null)
  const [editingExperience, setEditingExperience] = useState<Experience | null>(null)
  const [editingEducation, setEditingEducation] = useState<Education | null>(null)
  const [editingCertificate, setEditingCertificate] = useState<Certificate | null>(null)
  
  // New item states
  const [newProject, setNewProject] = useState<Partial<Project>>({
    title: '',
    description: '',
    link: '',
    technologies: []
  })
  const [newSkill, setNewSkill] = useState<Partial<Skill>>({
    name: '',
    level: 50,
    category: ''
  })
  const [newExperience, setNewExperience] = useState<Partial<Experience>>({
    role: '',
    company: '',
    period: '',
    description: '',
    achievements: []
  })
  const [newEducation, setNewEducation] = useState<Partial<Education>>({
    institution: '',
    degree: '',
    period: '',
    description: ''
  })
  const [newCertificate, setNewCertificate] = useState<Partial<Certificate>>({
    name: '',
    issuer: '',
    date: '',
    credentialLink: ''
  })
  
  // Creation states
  const [isCreatingProject, setIsCreatingProject] = useState(false)
  const [isCreatingSkill, setIsCreatingSkill] = useState(false)
  const [isCreatingExperience, setIsCreatingExperience] = useState(false)
  const [isCreatingEducation, setIsCreatingEducation] = useState(false)
  const [isCreatingCertificate, setIsCreatingCertificate] = useState(false)
  
  // For adding tags/achievements
  const [newTechnology, setNewTechnology] = useState('')
  const [newAchievement, setNewAchievement] = useState('')

  useEffect(() => {
    // Only load data if authenticated
    if (isAuthenticated) {
      loadPortfolioData()
    }
  }, [isAuthenticated])

  const loadPortfolioData = async () => {
    try {
      setIsLoading(true)
      
      // Load projects
      const projectsResponse = await fetch('/api/admin/portfolio/projects')
      const skillsResponse = await fetch('/api/admin/portfolio/skills')
      const experiencesResponse = await fetch('/api/admin/portfolio/experiences')
      const educationResponse = await fetch('/api/admin/portfolio/education')
      
      if (!projectsResponse.ok || !skillsResponse.ok || !experiencesResponse.ok || !educationResponse.ok) {
        // If API routes aren't set up yet, use the static data files for now
        const projectsData = await import('@/data/projects.json')
        const skillsData = await import('@/data/skills.json')
        const experiencesData = await import('@/data/experiences.json')
        const educationData = await import('@/data/education.json')
        
        setPortfolioData({
          projects: projectsData.projects || [],
          skills: skillsData.skills || [],
          experiences: experiencesData.experiences || [],
          education: educationData.education || [],
          certificates: educationData.certificates || []
        })
      } else {
        // Use the API responses when they're ready
        const projects = await projectsResponse.json()
        const skills = await skillsResponse.json()
        const experiences = await experiencesResponse.json()
        const education = await educationResponse.json()
        
        setPortfolioData({
          projects,
          skills,
          experiences,
          education: education.education || [],
          certificates: education.certificates || []
        })
      }
    } catch (err) {
      // Fallback to static JSON data if API fails
      try {
        const projectsData = await import('@/data/projects.json')
        const skillsData = await import('@/data/skills.json')
        const experiencesData = await import('@/data/experiences.json')
        const educationData = await import('@/data/education.json')
        
        setPortfolioData({
          projects: projectsData.projects || [],
          skills: skillsData.skills || [],
          experiences: experiencesData.experiences || [],
          education: educationData.education || [],
          certificates: educationData.certificates || []
        })
      } catch (error) {
        setError('Error loading portfolio data')
        console.error(error)
      }
    } finally {
      setIsLoading(false)
    }
  }

  const handleAuthenticate = (e: FormEvent) => {
    e.preventDefault()
    // This is a simple authentication for demo purposes
    // In a real app, use proper authentication
    if (password === 'admin123') { // This should be environment variable or proper auth
      setIsAuthenticated(true)
      localStorage.setItem('adminAuthenticated', 'true')
      setError('')
    } else {
      setError('Invalid password')
    }
  }

  const saveData = async (dataType: string, data: any) => {
    try {
      const response = await fetch(`/api/admin/portfolio/${dataType}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      
      if (!response.ok) {
        throw new Error(`Failed to update ${dataType}`)
      }
      
      // If API call succeeds, update the state
      await loadPortfolioData()
      return true
    } catch (err) {
      console.error(`Error saving ${dataType}:`, err)
      setError(`Failed to save ${dataType}. The API route might not be set up yet.`)
      
      // For now, if the API fails, we'll update the state directly
      // This simulates the save functionality until the API is implemented
      return simulateSave(dataType, data)
    }
  }
  
  // Temporary function to simulate saving data until API routes are set up
  const simulateSave = (dataType: string, data: any) => {
    switch (dataType) {
      case 'projects':
        setPortfolioData(prev => ({ ...prev, projects: data }))
        break
      case 'skills':
        setPortfolioData(prev => ({ ...prev, skills: data }))
        break
      case 'experiences':
        setPortfolioData(prev => ({ ...prev, experiences: data }))
        break
      case 'education':
        // Handle education and certificates together
        if (Array.isArray(data)) {
          setPortfolioData(prev => ({ ...prev, education: data }))
        } else if (data.education && data.certificates) {
          setPortfolioData(prev => ({ 
            ...prev, 
            education: data.education,
            certificates: data.certificates
          }))
        }
        break
      case 'certificates':
        setPortfolioData(prev => ({ ...prev, certificates: data }))
        break
      default:
        return false
    }
    return true
  }

  // Project management functions
  const handleCreateProject = async () => {
    if (!newProject.title || !newProject.description) {
      setError('Title and description are required')
      return
    }

    try {
      const id = Math.max(0, ...portfolioData.projects.map(p => p.id)) + 1
      const projectToAdd = {
        ...newProject,
        id,
        technologies: newProject.technologies || []
      } as Project
      
      const updatedProjects = [...portfolioData.projects, projectToAdd]
      const success = await saveData('projects', updatedProjects)
      
      if (success) {
        setNewProject({
          title: '',
          description: '',
          link: '',
          technologies: []
        })
        setIsCreatingProject(false)
      }
    } catch (err) {
      setError('Error creating project')
      console.error(err)
    }
  }

  const handleUpdateProject = async () => {
    if (!editingProject) return

    try {
      const updatedProjects = portfolioData.projects.map(project => 
        project.id === editingProject.id ? editingProject : project
      )
      
      const success = await saveData('projects', updatedProjects)
      
      if (success) {
        setEditingProject(null)
      }
    } catch (err) {
      setError('Error updating project')
      console.error(err)
    }
  }

  const handleDeleteProject = async (id: number) => {
    if (!confirm('Are you sure you want to delete this project?')) return

    try {
      const updatedProjects = portfolioData.projects.filter(project => project.id !== id)
      const success = await saveData('projects', updatedProjects)
      
      if (!success) {
        setError('Failed to delete project')
      }
    } catch (err) {
      setError('Error deleting project')
      console.error(err)
    }
  }

  // Skill management functions
  const handleCreateSkill = async () => {
    if (!newSkill.name || !newSkill.category) {
      setError('Name and category are required')
      return
    }

    try {
      const id = Math.max(0, ...portfolioData.skills.map(s => s.id)) + 1
      const skillToAdd = {
        ...newSkill,
        id,
        level: newSkill.level || 50
      } as Skill
      
      const updatedSkills = [...portfolioData.skills, skillToAdd]
      const success = await saveData('skills', updatedSkills)
      
      if (success) {
        setNewSkill({
          name: '',
          level: 50,
          category: ''
        })
        setIsCreatingSkill(false)
      }
    } catch (err) {
      setError('Error creating skill')
      console.error(err)
    }
  }

  const handleUpdateSkill = async () => {
    if (!editingSkill) return

    try {
      const updatedSkills = portfolioData.skills.map(skill => 
        skill.id === editingSkill.id ? editingSkill : skill
      )
      
      const success = await saveData('skills', updatedSkills)
      
      if (success) {
        setEditingSkill(null)
      }
    } catch (err) {
      setError('Error updating skill')
      console.error(err)
    }
  }

  const handleDeleteSkill = async (id: number) => {
    if (!confirm('Are you sure you want to delete this skill?')) return

    try {
      const updatedSkills = portfolioData.skills.filter(skill => skill.id !== id)
      const success = await saveData('skills', updatedSkills)
      
      if (!success) {
        setError('Failed to delete skill')
      }
    } catch (err) {
      setError('Error deleting skill')
      console.error(err)
    }
  }

  // Experience management functions
  const handleCreateExperience = async () => {
    if (!newExperience.role || !newExperience.company || !newExperience.period) {
      setError('Role, company and period are required')
      return
    }

    try {
      const id = Math.max(0, ...portfolioData.experiences.map(e => e.id)) + 1
      const experienceToAdd = {
        ...newExperience,
        id,
        description: newExperience.description || '',
        achievements: newExperience.achievements || []
      } as Experience
      
      const updatedExperiences = [...portfolioData.experiences, experienceToAdd]
      const success = await saveData('experiences', updatedExperiences)
      
      if (success) {
        setNewExperience({
          role: '',
          company: '',
          period: '',
          description: '',
          achievements: []
        })
        setIsCreatingExperience(false)
      }
    } catch (err) {
      setError('Error creating experience')
      console.error(err)
    }
  }

  const handleUpdateExperience = async () => {
    if (!editingExperience) return

    try {
      const updatedExperiences = portfolioData.experiences.map(experience => 
        experience.id === editingExperience.id ? editingExperience : experience
      )
      
      const success = await saveData('experiences', updatedExperiences)
      
      if (success) {
        setEditingExperience(null)
      }
    } catch (err) {
      setError('Error updating experience')
      console.error(err)
    }
  }

  const handleDeleteExperience = async (id: number) => {
    if (!confirm('Are you sure you want to delete this experience?')) return

    try {
      const updatedExperiences = portfolioData.experiences.filter(experience => experience.id !== id)
      const success = await saveData('experiences', updatedExperiences)
      
      if (!success) {
        setError('Failed to delete experience')
      }
    } catch (err) {
      setError('Error deleting experience')
      console.error(err)
    }
  }

  // Education management functions
  const handleCreateEducation = async () => {
    if (!newEducation.institution || !newEducation.degree || !newEducation.period) {
      setError('Institution, degree and period are required')
      return
    }

    try {
      const id = Math.max(0, ...portfolioData.education.map(e => e.id)) + 1
      const educationToAdd = {
        ...newEducation,
        id,
        description: newEducation.description || ''
      } as Education
      
      const updatedEducation = [...portfolioData.education, educationToAdd]
      const success = await saveData('education', updatedEducation)
      
      if (success) {
        setNewEducation({
          institution: '',
          degree: '',
          period: '',
          description: ''
        })
        setIsCreatingEducation(false)
      }
    } catch (err) {
      setError('Error creating education')
      console.error(err)
    }
  }

  const handleUpdateEducation = async () => {
    if (!editingEducation) return

    try {
      const updatedEducation = portfolioData.education.map(education => 
        education.id === editingEducation.id ? editingEducation : education
      )
      
      const success = await saveData('education', updatedEducation)
      
      if (success) {
        setEditingEducation(null)
      }
    } catch (err) {
      setError('Error updating education')
      console.error(err)
    }
  }

  const handleDeleteEducation = async (id: number) => {
    if (!confirm('Are you sure you want to delete this education?')) return

    try {
      const updatedEducation = portfolioData.education.filter(education => education.id !== id)
      const success = await saveData('education', updatedEducation)
      
      if (!success) {
        setError('Failed to delete education')
      }
    } catch (err) {
      setError('Error deleting education')
      console.error(err)
    }
  }

  // Certificate management functions
  const handleCreateCertificate = async () => {
    if (!newCertificate.name || !newCertificate.issuer || !newCertificate.date) {
      setError('Name, issuer and date are required')
      return
    }

    try {
      const id = Math.max(0, ...portfolioData.certificates.map(c => c.id)) + 1
      const certificateToAdd = {
        ...newCertificate,
        id,
        credentialLink: newCertificate.credentialLink || '#'
      } as Certificate
      
      const updatedCertificates = [...portfolioData.certificates, certificateToAdd]
      const success = await saveData('certificates', updatedCertificates)
      
      if (success) {
        setNewCertificate({
          name: '',
          issuer: '',
          date: '',
          credentialLink: ''
        })
        setIsCreatingCertificate(false)
      }
    } catch (err) {
      setError('Error creating certificate')
      console.error(err)
    }
  }

  const handleUpdateCertificate = async () => {
    if (!editingCertificate) return

    try {
      const updatedCertificates = portfolioData.certificates.map(certificate => 
        certificate.id === editingCertificate.id ? editingCertificate : certificate
      )
      
      const success = await saveData('certificates', updatedCertificates)
      
      if (success) {
        setEditingCertificate(null)
      }
    } catch (err) {
      setError('Error updating certificate')
      console.error(err)
    }
  }

  const handleDeleteCertificate = async (id: number) => {
    if (!confirm('Are you sure you want to delete this certificate?')) return

    try {
      const updatedCertificates = portfolioData.certificates.filter(certificate => certificate.id !== id)
      const success = await saveData('certificates', updatedCertificates)
      
      if (!success) {
        setError('Failed to delete certificate')
      }
    } catch (err) {
      setError('Error deleting certificate')
      console.error(err)
    }
  }

  // Helper functions for arrays (technologies, achievements)
  const addTechnology = () => {
    if (!newTechnology.trim()) return
    
    if (editingProject) {
      setEditingProject({
        ...editingProject,
        technologies: [...editingProject.technologies, newTechnology.trim()]
      })
    } else {
      setNewProject({
        ...newProject,
        technologies: [...(newProject.technologies || []), newTechnology.trim()]
      })
    }
    
    setNewTechnology('')
  }

  const removeTechnology = (tech: string) => {
    if (editingProject) {
      setEditingProject({
        ...editingProject,
        technologies: editingProject.technologies.filter(t => t !== tech)
      })
    } else {
      setNewProject({
        ...newProject,
        technologies: (newProject.technologies || []).filter(t => t !== tech)
      })
    }
  }

  const addAchievement = () => {
    if (!newAchievement.trim()) return
    
    if (editingExperience) {
      setEditingExperience({
        ...editingExperience,
        achievements: [...editingExperience.achievements, newAchievement.trim()]
      })
    } else {
      setNewExperience({
        ...newExperience,
        achievements: [...(newExperience.achievements || []), newAchievement.trim()]
      })
    }
    
    setNewAchievement('')
  }

  const removeAchievement = (achievement: string) => {
    if (editingExperience) {
      setEditingExperience({
        ...editingExperience,
        achievements: editingExperience.achievements.filter(a => a !== achievement)
      })
    } else {
      setNewExperience({
        ...newExperience,
        achievements: (newExperience.achievements || []).filter(a => a !== achievement)
      })
    }
  }

  // Show login form if user is not authenticated
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-white dark:bg-gray-900 flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="max-w-md w-full p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg"
        >
          <h1 className="text-2xl font-bold text-gray-800 dark:text-white mb-6">Portfolio Admin Login</h1>
          
          {error && (
            <div className="bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-100 p-3 rounded-lg mb-4">
              {error}
            </div>
          )}
          
          <form onSubmit={handleAuthenticate}>
            <div className="mb-4">
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Password
              </label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                required
              />
            </div>
            
            <button
              type="submit"
              className="w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition-colors"
            >
              Login
            </button>
          </form>
          
          <div className="mt-4 text-center">
            <Link href="/admin" className="text-blue-500 hover:text-blue-700 dark:hover:text-blue-300">
              Back to Admin Dashboard
            </Link>
          </div>
        </motion.div>
      </div>
    )
  }

  // Main component UI for authenticated users
  return (
    <div className="min-h-screen bg-white dark:bg-gray-900 p-6">
      <div className="max-w-6xl mx-auto">
        <div className="flex flex-col sm:flex-row justify-between items-center gap-4 mb-8">
          <h1 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400">
            Portfolio Administration
          </h1>
          <div className="flex gap-3">
            <Link
              href="/admin"
              className="flex items-center gap-2 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 px-5 py-2.5 rounded-xl transition-all duration-300 shadow-sm hover:shadow border border-gray-200 dark:border-gray-700 group"
            >
              <FaArrowLeft className="text-blue-500 group-hover:transform group-hover:-translate-x-1 transition-transform duration-300" /> 
              <span>Back to Admin</span>
            </Link>
            <button
              onClick={() => {
                localStorage.removeItem('adminAuthenticated')
                setIsAuthenticated(false)
              }}
              className="flex items-center gap-2 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 px-5 py-2.5 rounded-xl transition-all duration-300 shadow-sm hover:shadow border border-red-100 dark:border-red-800/30 hover:bg-red-100 dark:hover:bg-red-800/30"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z" clipRule="evenodd" />
              </svg>
              <span>Logout</span>
            </button>
            <Link
              href="/"
              className="flex items-center gap-2 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-5 py-2.5 rounded-xl transition-all duration-300 shadow-sm hover:shadow-md transform hover:scale-[1.02]"
            >
              <span>View Portfolio</span>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" />
              </svg>
            </Link>
          </div>
        </div>

        {error && (
          <motion.div 
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-200 p-4 rounded-xl mb-6 shadow-sm"
          >
            <div className="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
              <span>{error}</span>
            </div>
          </motion.div>
        )}

        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg mb-8 overflow-hidden border border-gray-100 dark:border-gray-700">
          <div className="relative">
            <div className="absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500"></div>
            
            <div className="flex p-1 overflow-x-auto scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600">
              <div className="flex space-x-1 p-2 bg-gray-50 dark:bg-gray-800 rounded-lg w-full">
                <button
                  onClick={() => setActiveSection('projects')}
                  className={`px-5 py-2.5 font-medium text-sm whitespace-nowrap rounded-lg transition-all duration-200 flex items-center gap-2 ${
                    activeSection === 'projects'
                      ? 'bg-white dark:bg-gray-700 text-blue-600 dark:text-blue-400 shadow-sm' 
                      : 'text-gray-600 dark:text-gray-300 hover:bg-white/60 dark:hover:bg-gray-700/60 hover:text-blue-600 dark:hover:text-blue-400'
                  }`}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z" />
                  </svg>
                  Projects
                </button>
                
                <button
                  onClick={() => setActiveSection('skills')}
                  className={`px-5 py-2.5 font-medium text-sm whitespace-nowrap rounded-lg transition-all duration-200 flex items-center gap-2 ${
                    activeSection === 'skills'
                      ? 'bg-white dark:bg-gray-700 text-purple-600 dark:text-purple-400 shadow-sm' 
                      : 'text-gray-600 dark:text-gray-300 hover:bg-white/60 dark:hover:bg-gray-700/60 hover:text-purple-600 dark:hover:text-purple-400'
                  }`}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clipRule="evenodd" />
                  </svg>
                  Skills
                </button>
                
                <button
                  onClick={() => setActiveSection('experiences')}
                  className={`px-5 py-2.5 font-medium text-sm whitespace-nowrap rounded-lg transition-all duration-200 flex items-center gap-2 ${
                    activeSection === 'experiences'
                      ? 'bg-white dark:bg-gray-700 text-indigo-600 dark:text-indigo-400 shadow-sm' 
                      : 'text-gray-600 dark:text-gray-300 hover:bg-white/60 dark:hover:bg-gray-700/60 hover:text-indigo-600 dark:hover:text-indigo-400'
                  }`}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M6 6V5a3 3 0 013-3h2a3 3 0 013 3v1h2a2 2 0 012 2v3.57A22.952 22.952 0 0110 13a22.95 22.95 0 01-8-1.43V8a2 2 0 012-2h2zm2-1a1 1 0 011-1h2a1 1 0 011 1v1H8V5zm1 5a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1z" clipRule="evenodd" />
                    <path d="M2 13.692V16a2 2 0 002 2h12a2 2 0 002-2v-2.308A24.974 24.974 0 0110 15c-2.796 0-5.487-.46-8-1.308z" />
                  </svg>
                  Experiences
                </button>
                
                <button
                  onClick={() => setActiveSection('education')}
                  className={`px-5 py-2.5 font-medium text-sm whitespace-nowrap rounded-lg transition-all duration-200 flex items-center gap-2 ${
                    activeSection === 'education'
                      ? 'bg-white dark:bg-gray-700 text-green-600 dark:text-green-400 shadow-sm' 
                      : 'text-gray-600 dark:text-gray-300 hover:bg-white/60 dark:hover:bg-gray-700/60 hover:text-green-600 dark:hover:text-green-400'
                  }`}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z" />
                  </svg>
                  Education
                </button>
                
                <button
                  onClick={() => setActiveSection('certificates')}
                  className={`px-5 py-2.5 font-medium text-sm whitespace-nowrap rounded-lg transition-all duration-200 flex items-center gap-2 ${
                    activeSection === 'certificates'
                      ? 'bg-white dark:bg-gray-700 text-amber-600 dark:text-amber-400 shadow-sm' 
                      : 'text-gray-600 dark:text-gray-300 hover:bg-white/60 dark:hover:bg-gray-700/60 hover:text-amber-600 dark:hover:text-amber-400'
                  }`}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                  </svg>
                  Certificates
                </button>
              </div>
            </div>
          </div>
          
          <div className="p-6">

          {isLoading ? (
            <div className="flex flex-col items-center justify-center py-12">
              <div className="w-16 h-16 border-4 border-gray-200 dark:border-gray-700 border-t-blue-500 dark:border-t-blue-400 rounded-full animate-spin mb-4"></div>
              <p className="text-gray-600 dark:text-gray-300 text-center animate-pulse">Loading portfolio data...</p>
            </div>
          ) : (
            <>
              {/* Projects Section */}
              {activeSection === 'projects' && (
                <div>
                  <div className="flex justify-between items-center mb-6">
                    <h2 className="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-blue-400 dark:from-blue-400 dark:to-blue-300">
                      Projects
                    </h2>
                    <button
                      onClick={() => setIsCreatingProject(!isCreatingProject)}
                      className={`flex items-center gap-2 ${
                        isCreatingProject 
                          ? "bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 border border-gray-300 dark:border-gray-600"
                          : "bg-gradient-to-r from-blue-500 to-blue-600 text-white"
                      } px-5 py-2.5 rounded-lg shadow-sm hover:shadow transition-all duration-300 hover:translate-y-[-1px]`}
                    >
                      {isCreatingProject ? (
                        <>
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                          </svg>
                          <span>Cancel</span>
                        </>
                      ) : (
                        <>
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
                          </svg>
                          <span>Add New Project</span>
                        </>
                      )}
                    </button>
                  </div>

                  {portfolioData.projects.length === 0 ? (
                    <div className="flex flex-col items-center justify-center py-12 bg-gray-50 dark:bg-gray-800/50 rounded-xl border border-dashed border-gray-300 dark:border-gray-700">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                      </svg>
                      <p className="text-gray-600 dark:text-gray-300 mb-2">No projects found</p>
                      <p className="text-gray-500 dark:text-gray-400 text-sm text-center max-w-md">
                        Add your first project to showcase your work and skills
                      </p>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 gap-6">
                      {portfolioData.projects.map((project) => (
                        <motion.div
                          key={project.id}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.3 }}
                          className="border border-gray-200 dark:border-gray-700 rounded-xl p-6 bg-white dark:bg-gray-800 hover:shadow-md transition-all duration-300 group relative overflow-hidden"
                        >
                          <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                          
                          <div className="flex flex-col sm:flex-row justify-between sm:items-start gap-4 relative">
                            <div className="flex-1">
                              <h3 className="text-xl font-semibold text-gray-800 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300">
                                {project.title}
                              </h3>
                              
                              <a 
                                href={project.link} 
                                target="_blank" 
                                rel="noopener noreferrer" 
                                className="text-blue-500 text-sm hover:text-blue-700 dark:hover:text-blue-300 inline-flex items-center gap-1 mt-1 group"
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                  <path fillRule="evenodd" d="M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z" clipRule="evenodd" />
                                </svg>
                                <span className="group-hover:underline">{project.link}</span>
                              </a>
                              
                              <p className="text-gray-600 dark:text-gray-300 mt-3 line-clamp-2">{project.description}</p>
                              
                              {project.technologies && project.technologies.length > 0 && (
                                <div className="flex flex-wrap gap-2 mt-4">
                                  {project.technologies.map((tech, index) => (
                                    <span
                                      key={index}
                                      className="px-3 py-1 bg-blue-50 dark:bg-blue-900/30 text-xs rounded-full text-blue-600 dark:text-blue-300 border border-blue-100 dark:border-blue-800"
                                    >
                                      {tech}
                                    </span>
                                  ))}
                                </div>
                              )}
                            </div>
                            
                            <div className="flex sm:flex-col gap-2 self-start">
                              <button
                                onClick={() => setEditingProject(project)}
                                className="p-2 bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-800/30 transition-colors duration-300"
                                aria-label="Edit project"
                              >
                                <FaEdit className="text-lg" />
                              </button>
                              <button
                                onClick={() => handleDeleteProject(project.id)}
                                className="p-2 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg hover:bg-red-100 dark:hover:bg-red-800/30 transition-colors duration-300"
                                aria-label="Delete project"
                              >
                                <FaTrash className="text-lg" />
                              </button>
                            </div>
                          </div>
                        </motion.div>
                      ))}
                    </div>
                  )}

                  {/* Project Editor - Create new project or edit existing project */}
                  {(isCreatingProject || editingProject) && (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3 }}
                      className="mt-8 bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border border-gray-200 dark:border-gray-700 relative overflow-hidden"
                    >
                      <div className="absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-blue-500 to-purple-600"></div>
                      
                      <div className="flex items-center gap-3 mb-6">
                        <div className={`p-2 rounded-lg ${editingProject ? 'bg-amber-100 dark:bg-amber-900/30 text-amber-700 dark:text-amber-400' : 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400'}`}>
                          {editingProject ? (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                            </svg>
                          ) : (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
                            </svg>
                          )}
                        </div>
                        <h3 className="text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400">
                          {editingProject ? 'Edit Project' : 'Add New Project'}
                        </h3>
                      </div>
                      
                      <div className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <div>
                            <label htmlFor="title" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                              Project Title
                            </label>
                            <input
                              type="text"
                              id="title"
                              value={editingProject ? editingProject.title : newProject.title}
                              onChange={(e) => editingProject 
                                ? setEditingProject({ ...editingProject, title: e.target.value })
                                : setNewProject({ ...newProject, title: e.target.value })
                              }
                              className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-600 focus:border-transparent transition-all duration-200"
                              required
                              placeholder="Enter project title"
                            />
                          </div>
                          
                          <div>
                            <label htmlFor="link" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                              Project Link
                            </label>
                            <input
                              type="url"
                              id="link"
                              value={editingProject ? editingProject.link : newProject.link}
                              onChange={(e) => editingProject 
                                ? setEditingProject({ ...editingProject, link: e.target.value })
                                : setNewProject({ ...newProject, link: e.target.value })
                              }
                              className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-600 focus:border-transparent transition-all duration-200"
                              required
                              placeholder="https://example.com"
                            />
                          </div>
                        </div>
                        
                        <div>
                          <label htmlFor="projectDescription" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                            Project Description
                          </label>
                          <textarea
                            id="projectDescription"
                            value={editingProject ? editingProject.description : newProject.description}
                            onChange={(e) => editingProject 
                              ? setEditingProject({ ...editingProject, description: e.target.value })
                              : setNewProject({ ...newProject, description: e.target.value })
                            }
                            rows={4}
                            className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-600 focus:border-transparent transition-all duration-200"
                            required
                            placeholder="Enter project description"
                          />
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                            Technologies Used
                          </label>
                          <div className="flex gap-2 mb-3">
                            <div className="relative flex-grow">
                              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                                  <path fillRule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clipRule="evenodd" />
                                </svg>
                              </div>
                              <input
                                type="text"
                                value={newTechnology}
                                onChange={(e) => setNewTechnology(e.target.value)}
                                placeholder="Add technology (e.g. React, Node.js)"
                                className="w-full pl-10 p-3 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-600 focus:border-transparent transition-all duration-200"
                                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTechnology())}
                              />
                            </div>
                            <button
                              type="button"
                              onClick={addTechnology}
                              className="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white min-w-[80px] px-4 py-3 rounded-xl transition-all duration-300 hover:shadow-md flex items-center justify-center"
                            >
                              Add
                            </button>
                          </div>
                          
                          <div className="flex flex-wrap gap-2 p-3 bg-gray-50 dark:bg-gray-700/50 rounded-xl min-h-[60px] border border-gray-200 dark:border-gray-700">
                            {(editingProject ? editingProject.technologies : newProject.technologies || []).length === 0 ? (
                              <p className="text-gray-400 dark:text-gray-500 text-sm w-full text-center">No technologies added yet</p>
                            ) : (
                              (editingProject ? editingProject.technologies : newProject.technologies || []).map((tech, index) => (
                                <div
                                  key={index}
                                  className="flex items-center gap-1 px-3 py-1.5 bg-blue-50 dark:bg-blue-900/30 rounded-full text-blue-700 dark:text-blue-300 border border-blue-100 dark:border-blue-800/50 transition-all duration-200 hover:shadow-sm group"
                                >
                                  <span>{tech}</span>
                                  <button
                                    type="button"
                                    onClick={() => removeTechnology(tech)}
                                    className="ml-1 hover:bg-blue-200 dark:hover:bg-blue-800 rounded-full h-5 w-5 flex items-center justify-center text-blue-700 dark:text-blue-300"
                                  >
                                    &times;
                                  </button>
                                </div>
                              ))
                            )}
                          </div>
                        </div>
                        
                        <div className="flex justify-end gap-3 mt-8 pt-4 border-t border-gray-200 dark:border-gray-700">
                          <button
                            type="button"
                            onClick={() => {
                              setEditingProject(null)
                              setIsCreatingProject(false)
                            }}
                            className="px-6 py-2.5 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 font-medium rounded-xl transition-all duration-300 flex items-center gap-2"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                            </svg>
                            Cancel
                          </button>
                          <button
                            type="button"
                            onClick={editingProject ? handleUpdateProject : handleCreateProject}
                            className="px-6 py-2.5 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white font-medium rounded-xl shadow-sm hover:shadow transition-all duration-300 flex items-center gap-2 transform hover:translate-y-[-1px]"
                          >
                            <FaSave className="text-lg" />
                            {editingProject ? 'Update Project' : 'Create Project'}
                          </button>
                        </div>
                      </div>
                    </motion.div>
                  )}
                </div>
              )}

              {/* Skills Section */}
              {activeSection === 'skills' && (
                <div>
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold text-gray-800 dark:text-white">Skills</h2>
                    <button
                      onClick={() => setIsCreatingSkill(!isCreatingSkill)}
                      className="flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
                    >
                      {isCreatingSkill ? 'Cancel' : 'Add New Skill'} {!isCreatingSkill && <FaPlus />}
                    </button>
                  </div>

                  {portfolioData.skills.length === 0 ? (
                    <p className="text-gray-600 dark:text-gray-300">No skills found.</p>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {portfolioData.skills.map((skill) => (
                        <div
                          key={skill.id}
                          className="border dark:border-gray-700 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-750"
                        >
                          <div className="flex justify-between mb-2">
                            <div>
                              <h3 className="text-lg font-medium text-gray-800 dark:text-white">{skill.name}</h3>
                              <span className="text-sm text-gray-500 dark:text-gray-400">{skill.category}</span>
                            </div>
                            <div className="flex gap-2">
                              <button
                                onClick={() => setEditingSkill(skill)}
                                className="p-2 text-blue-500 hover:text-blue-700 dark:hover:text-blue-300"
                                aria-label="Edit skill"
                              >
                                <FaEdit />
                              </button>
                              <button
                                onClick={() => handleDeleteSkill(skill.id)}
                                className="p-2 text-red-500 hover:text-red-700 dark:hover:text-red-300"
                                aria-label="Delete skill"
                              >
                                <FaTrash />
                              </button>
                            </div>
                          </div>
                          <div className="mt-2">
                            <div className="flex justify-between mb-1">
                              <span className="text-sm text-gray-600 dark:text-gray-300">Proficiency</span>
                              <span className="text-sm text-gray-600 dark:text-gray-300">{skill.level}%</span>
                            </div>
                            <div className="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-full">
                              <div
                                className="h-full bg-blue-500 rounded-full"
                                style={{ width: `${skill.level}%` }}
                              ></div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Skill Editor */}
                  {(isCreatingSkill || editingSkill) && (
                    <div className="mt-6 bg-gray-50 dark:bg-gray-750 rounded-lg p-4 border dark:border-gray-700">
                      <h3 className="text-lg font-semibold text-gray-800 dark:text-white mb-4">
                        {editingSkill ? 'Edit Skill' : 'Add New Skill'}
                      </h3>
                      
                      <div className="space-y-4">
                        <div>
                          <label htmlFor="skillName" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Name
                          </label>
                          <input
                            type="text"
                            id="skillName"
                            value={editingSkill ? editingSkill.name : newSkill.name}
                            onChange={(e) => editingSkill 
                              ? setEditingSkill({ ...editingSkill, name: e.target.value })
                              : setNewSkill({ ...newSkill, name: e.target.value })
                            }
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                            required
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="skillCategory" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Category
                          </label>
                          <input
                            type="text"
                            id="skillCategory"
                            value={editingSkill ? editingSkill.category : newSkill.category}
                            onChange={(e) => editingSkill 
                              ? setEditingSkill({ ...editingSkill, category: e.target.value })
                              : setNewSkill({ ...newSkill, category: e.target.value })
                            }
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                            required
                          />
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Proficiency Level: {editingSkill ? editingSkill.level : newSkill.level || 50}%
                          </label>
                          <input
                            type="range"
                            min="0"
                            max="100"
                            value={editingSkill ? editingSkill.level : newSkill.level || 50}
                            onChange={(e) => {
                              const value = parseInt(e.target.value)
                              editingSkill 
                                ? setEditingSkill({ ...editingSkill, level: value })
                                : setNewSkill({ ...newSkill, level: value })
                            }}
                            className="w-full"
                          />
                        </div>
                        
                        <div className="flex justify-end gap-3 mt-6">
                          <button
                            type="button"
                            onClick={() => {
                              setEditingSkill(null)
                              setIsCreatingSkill(false)
                            }}
                            className="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-white px-4 py-2 rounded-lg transition-colors"
                          >
                            Cancel
                          </button>
                          <button
                            type="button"
                            onClick={editingSkill ? handleUpdateSkill : handleCreateSkill}
                            className="flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
                          >
                            <FaSave /> {editingSkill ? 'Update Skill' : 'Create Skill'}
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Experiences Section */}
              {activeSection === 'experiences' && (
                <div>
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold text-gray-800 dark:text-white">Experiences</h2>
                    <button
                      onClick={() => setIsCreatingExperience(!isCreatingExperience)}
                      className="flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
                    >
                      {isCreatingExperience ? 'Cancel' : 'Add New Experience'} {!isCreatingExperience && <FaPlus />}
                    </button>
                  </div>

                  {portfolioData.experiences.length === 0 ? (
                    <p className="text-gray-600 dark:text-gray-300">No experiences found.</p>
                  ) : (
                    <div className="space-y-4">
                      {portfolioData.experiences.map((experience) => (
                        <div
                          key={experience.id}
                          className="border dark:border-gray-700 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-750"
                        >
                          <div className="flex justify-between items-start">
                            <div>
                              <div className="flex flex-col sm:flex-row sm:items-center gap-2 mb-1">
                                <h3 className="text-lg font-medium text-gray-800 dark:text-white">{experience.role}</h3>
                                <span className="text-sm text-blue-500">{experience.company}</span>
                              </div>
                              <p className="text-sm text-gray-500 dark:text-gray-400">{experience.period}</p>
                              <p className="text-gray-600 dark:text-gray-300 mt-2">{experience.description}</p>
                              
                              {experience.achievements && experience.achievements.length > 0 && (
                                <div className="mt-3">
                                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">Achievements:</h4>
                                  <ul className="list-disc list-inside text-gray-600 dark:text-gray-300 ml-2">
                                    {experience.achievements.map((achievement, index) => (
                                      <li key={index} className="text-sm">{achievement}</li>
                                    ))}
                                  </ul>
                                </div>
                              )}
                            </div>
                            
                            <div className="flex gap-2">
                              <button
                                onClick={() => setEditingExperience(experience)}
                                className="p-2 text-blue-500 hover:text-blue-700 dark:hover:text-blue-300"
                                aria-label="Edit experience"
                              >
                                <FaEdit />
                              </button>
                              <button
                                onClick={() => handleDeleteExperience(experience.id)}
                                className="p-2 text-red-500 hover:text-red-700 dark:hover:text-red-300"
                                aria-label="Delete experience"
                              >
                                <FaTrash />
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Experience Editor */}
                  {(isCreatingExperience || editingExperience) && (
                    <div className="mt-6 bg-gray-50 dark:bg-gray-750 rounded-lg p-4 border dark:border-gray-700">
                      <h3 className="text-lg font-semibold text-gray-800 dark:text-white mb-4">
                        {editingExperience ? 'Edit Experience' : 'Add New Experience'}
                      </h3>
                      
                      <div className="space-y-4">
                        <div>
                          <label htmlFor="role" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Role
                          </label>
                          <input
                            type="text"
                            id="role"
                            value={editingExperience ? editingExperience.role : newExperience.role}
                            onChange={(e) => editingExperience 
                              ? setEditingExperience({ ...editingExperience, role: e.target.value })
                              : setNewExperience({ ...newExperience, role: e.target.value })
                            }
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                            required
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="company" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Company/Organization
                          </label>
                          <input
                            type="text"
                            id="company"
                            value={editingExperience ? editingExperience.company : newExperience.company}
                            onChange={(e) => editingExperience 
                              ? setEditingExperience({ ...editingExperience, company: e.target.value })
                              : setNewExperience({ ...newExperience, company: e.target.value })
                            }
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                            required
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="period" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Period
                          </label>
                          <input
                            type="text"
                            id="period"
                            value={editingExperience ? editingExperience.period : newExperience.period}
                            onChange={(e) => editingExperience 
                              ? setEditingExperience({ ...editingExperience, period: e.target.value })
                              : setNewExperience({ ...newExperience, period: e.target.value })
                            }
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                            required
                            placeholder="e.g. 2020 ~ 2022"
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="expDescription" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Description
                          </label>
                          <textarea
                            id="expDescription"
                            value={editingExperience ? editingExperience.description : newExperience.description}
                            onChange={(e) => editingExperience 
                              ? setEditingExperience({ ...editingExperience, description: e.target.value })
                              : setNewExperience({ ...newExperience, description: e.target.value })
                            }
                            rows={3}
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                          />
                        </div>
                        
                        <div>
                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Achievements
                          </label>
                          <div className="flex gap-2 mb-2">
                            <input
                              type="text"
                              value={newAchievement}
                              onChange={(e) => setNewAchievement(e.target.value)}
                              placeholder="Add achievement"
                              className="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                              onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addAchievement())}
                            />
                            <button
                              type="button"
                              onClick={addAchievement}
                              className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
                            >
                              Add
                            </button>
                          </div>
                          
                          <div className="space-y-2">
                            {(editingExperience ? editingExperience.achievements : newExperience.achievements || []).map((achievement, index) => (
                              <div
                                key={index}
                                className="flex items-center justify-between gap-2 px-3 py-2 bg-gray-100 dark:bg-gray-700 rounded"
                              >
                                <span className="text-gray-800 dark:text-gray-200">{achievement}</span>
                                <button
                                  type="button"
                                  onClick={() => removeAchievement(achievement)}
                                  className="text-red-500 hover:text-red-700 dark:hover:text-red-400"
                                >
                                  &times;
                                </button>
                              </div>
                            ))}
                          </div>
                        </div>
                        
                        <div className="flex justify-end gap-3 mt-6">
                          <button
                            type="button"
                            onClick={() => {
                              setEditingExperience(null)
                              setIsCreatingExperience(false)
                            }}
                            className="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-white px-4 py-2 rounded-lg transition-colors"
                          >
                            Cancel
                          </button>
                          <button
                            type="button"
                            onClick={editingExperience ? handleUpdateExperience : handleCreateExperience}
                            className="flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
                          >
                            <FaSave /> {editingExperience ? 'Update Experience' : 'Create Experience'}
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Education Section */}
              {activeSection === 'education' && (
                <div>
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold text-gray-800 dark:text-white">Education</h2>
                    <button
                      onClick={() => setIsCreatingEducation(!isCreatingEducation)}
                      className="flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
                    >
                      {isCreatingEducation ? 'Cancel' : 'Add New Education'} {!isCreatingEducation && <FaPlus />}
                    </button>
                  </div>

                  {portfolioData.education.length === 0 ? (
                    <p className="text-gray-600 dark:text-gray-300">No education entries found.</p>
                  ) : (
                    <div className="space-y-4">
                      {portfolioData.education.map((education) => (
                        <div
                          key={education.id}
                          className="border dark:border-gray-700 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-750"
                        >
                          <div className="flex justify-between items-start">
                            <div>
                              <h3 className="text-lg font-medium text-gray-800 dark:text-white">{education.institution}</h3>
                              <p className="text-blue-500">{education.degree}</p>
                              <p className="text-sm text-gray-500 dark:text-gray-400">{education.period}</p>
                              <p className="text-gray-600 dark:text-gray-300 mt-2">{education.description}</p>
                            </div>
                            
                            <div className="flex gap-2">
                              <button
                                onClick={() => setEditingEducation(education)}
                                className="p-2 text-blue-500 hover:text-blue-700 dark:hover:text-blue-300"
                                aria-label="Edit education"
                              >
                                <FaEdit />
                              </button>
                              <button
                                onClick={() => handleDeleteEducation(education.id)}
                                className="p-2 text-red-500 hover:text-red-700 dark:hover:text-red-300"
                                aria-label="Delete education"
                              >
                                <FaTrash />
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Education Editor */}
                  {(isCreatingEducation || editingEducation) && (
                    <div className="mt-6 bg-gray-50 dark:bg-gray-750 rounded-lg p-4 border dark:border-gray-700">
                      <h3 className="text-lg font-semibold text-gray-800 dark:text-white mb-4">
                        {editingEducation ? 'Edit Education' : 'Add New Education'}
                      </h3>
                      
                      <div className="space-y-4">
                        <div>
                          <label htmlFor="institution" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Institution
                          </label>
                          <input
                            type="text"
                            id="institution"
                            value={editingEducation ? editingEducation.institution : newEducation.institution}
                            onChange={(e) => editingEducation 
                              ? setEditingEducation({ ...editingEducation, institution: e.target.value })
                              : setNewEducation({ ...newEducation, institution: e.target.value })
                            }
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                            required
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="degree" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Degree/Program
                          </label>
                          <input
                            type="text"
                            id="degree"
                            value={editingEducation ? editingEducation.degree : newEducation.degree}
                            onChange={(e) => editingEducation 
                              ? setEditingEducation({ ...editingEducation, degree: e.target.value })
                              : setNewEducation({ ...newEducation, degree: e.target.value })
                            }
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                            required
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="eduPeriod" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Period
                          </label>
                          <input
                            type="text"
                            id="eduPeriod"
                            value={editingEducation ? editingEducation.period : newEducation.period}
                            onChange={(e) => editingEducation 
                              ? setEditingEducation({ ...editingEducation, period: e.target.value })
                              : setNewEducation({ ...newEducation, period: e.target.value })
                            }
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                            required
                            placeholder="e.g. 2019 ~ 2023"
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="eduDescription" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Description
                          </label>
                          <textarea
                            id="eduDescription"
                            value={editingEducation ? editingEducation.description : newEducation.description}
                            onChange={(e) => editingEducation 
                              ? setEditingEducation({ ...editingEducation, description: e.target.value })
                              : setNewEducation({ ...newEducation, description: e.target.value })
                            }
                            rows={3}
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                          />
                        </div>
                        
                        <div className="flex justify-end gap-3 mt-6">
                          <button
                            type="button"
                            onClick={() => {
                              setEditingEducation(null)
                              setIsCreatingEducation(false)
                            }}
                            className="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-white px-4 py-2 rounded-lg transition-colors"
                          >
                            Cancel
                          </button>
                          <button
                            type="button"
                            onClick={editingEducation ? handleUpdateEducation : handleCreateEducation}
                            className="flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
                          >
                            <FaSave /> {editingEducation ? 'Update Education' : 'Create Education'}
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Certificates Section */}
              {activeSection === 'certificates' && (
                <div>
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold text-gray-800 dark:text-white">Certificates</h2>
                    <button
                      onClick={() => setIsCreatingCertificate(!isCreatingCertificate)}
                      className="flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
                    >
                      {isCreatingCertificate ? 'Cancel' : 'Add New Certificate'} {!isCreatingCertificate && <FaPlus />}
                    </button>
                  </div>

                  {portfolioData.certificates.length === 0 ? (
                    <p className="text-gray-600 dark:text-gray-300">No certificates found.</p>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {portfolioData.certificates.map((certificate) => (
                        <div
                          key={certificate.id}
                          className="border dark:border-gray-700 rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-750"
                        >
                          <div className="flex justify-between items-start">
                            <div>
                              <h3 className="text-lg font-medium text-gray-800 dark:text-white">{certificate.name}</h3>
                              <p className="text-sm text-gray-500 dark:text-gray-400">{certificate.issuer} • {certificate.date}</p>
                              <a 
                                href={certificate.credentialLink} 
                                target="_blank" 
                                rel="noopener noreferrer" 
                                className="text-blue-500 text-sm hover:underline mt-1 inline-block"
                              >
                                View Certificate
                              </a>
                            </div>
                            
                            <div className="flex gap-2">
                              <button
                                onClick={() => setEditingCertificate(certificate)}
                                className="p-2 text-blue-500 hover:text-blue-700 dark:hover:text-blue-300"
                                aria-label="Edit certificate"
                              >
                                <FaEdit />
                              </button>
                              <button
                                onClick={() => handleDeleteCertificate(certificate.id)}
                                className="p-2 text-red-500 hover:text-red-700 dark:hover:text-red-300"
                                aria-label="Delete certificate"
                              >
                                <FaTrash />
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Certificate Editor */}
                  {(isCreatingCertificate || editingCertificate) && (
                    <div className="mt-6 bg-gray-50 dark:bg-gray-750 rounded-lg p-4 border dark:border-gray-700">
                      <h3 className="text-lg font-semibold text-gray-800 dark:text-white mb-4">
                        {editingCertificate ? 'Edit Certificate' : 'Add New Certificate'}
                      </h3>
                      
                      <div className="space-y-4">
                        <div>
                          <label htmlFor="certName" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Certificate Name
                          </label>
                          <input
                            type="text"
                            id="certName"
                            value={editingCertificate ? editingCertificate.name : newCertificate.name}
                            onChange={(e) => editingCertificate 
                              ? setEditingCertificate({ ...editingCertificate, name: e.target.value })
                              : setNewCertificate({ ...newCertificate, name: e.target.value })
                            }
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                            required
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="issuer" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Issuer
                          </label>
                          <input
                            type="text"
                            id="issuer"
                            value={editingCertificate ? editingCertificate.issuer : newCertificate.issuer}
                            onChange={(e) => editingCertificate 
                              ? setEditingCertificate({ ...editingCertificate, issuer: e.target.value })
                              : setNewCertificate({ ...newCertificate, issuer: e.target.value })
                            }
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                            required
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="certDate" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Date
                          </label>
                          <input
                            type="text"
                            id="certDate"
                            value={editingCertificate ? editingCertificate.date : newCertificate.date}
                            onChange={(e) => editingCertificate 
                              ? setEditingCertificate({ ...editingCertificate, date: e.target.value })
                              : setNewCertificate({ ...newCertificate, date: e.target.value })
                            }
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                            required
                            placeholder="e.g. 2022"
                          />
                        </div>
                        
                        <div>
                          <label htmlFor="credentialLink" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Credential Link
                          </label>
                          <input
                            type="url"
                            id="credentialLink"
                            value={editingCertificate ? editingCertificate.credentialLink : newCertificate.credentialLink}
                            onChange={(e) => editingCertificate 
                              ? setEditingCertificate({ ...editingCertificate, credentialLink: e.target.value })
                              : setNewCertificate({ ...newCertificate, credentialLink: e.target.value })
                            }
                            className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-white"
                            placeholder="https://..."
                          />
                        </div>
                        
                        <div className="flex justify-end gap-3 mt-6">
                          <button
                            type="button"
                            onClick={() => {
                              setEditingCertificate(null)
                              setIsCreatingCertificate(false)
                            }}
                            className="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-white px-4 py-2 rounded-lg transition-colors"
                          >
                            Cancel
                          </button>
                          <button
                            type="button"
                            onClick={editingCertificate ? handleUpdateCertificate : handleCreateCertificate}
                            className="flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition-colors"
                          >
                            <FaSave /> {editingCertificate ? 'Update Certificate' : 'Create Certificate'}
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
}